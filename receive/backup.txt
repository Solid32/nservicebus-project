using NServiceBus;
using System;
using System.Data.SQLite;
using System.Threading.Tasks;
using System.Text.RegularExpressions;


public class MyMessageHandler : IHandleMessages<MyMessage>
{
    static string connectionString = "Data Source=test.db;Version=3;";

    public Task Handle(MyMessage message, IMessageHandlerContext context)
    {
// Obtenez les données du message
var values = message.Data.Split(',');
var Number = int.Parse(values[0]);
var Name = values[1];
var Type1 = values[2];
var Type2 = values[3];
var abilities = Regex.Matches(values[4], @"[a-zA-Z\s]+")
                     .Cast<Match>()
                     .Select(m => m.Value.Trim())
                     .ToArray();
var Ability_1 = abilities.Length >= 1 ? abilities[0] : " ";
var Ability_2 = abilities.Length >= 2 ? abilities[1] : " ";
var Ability_3 = abilities.Length >= 3 ? abilities[2] : " ";
var HP = int.Parse(values[5]);
var Att = int.Parse(values[6]);
var Def = int.Parse(values[7]);
var Spa = int.Parse(values[8]);
var Spd = int.Parse(values[9]);
var Spe = int.Parse(values[10]);
var AgainstNormal = double.Parse(values[11]);
var AgainstFire = double.Parse(values[12]);
var AgainstWater = double.Parse(values[13]);
var AgainstElectric = double.Parse(values[14]);
var AgainstGrass = double.Parse(values[15]);
var AgainstIce = double.Parse(values[16]);
var AgainstFighting = double.Parse(values[17]);
var AgainstPoison = double.Parse(values[18]);
var AgainstGround = double.Parse(values[19]);
var AgainstFlying = double.Parse(values[20]);
var AgainstPsychic = double.Parse(values[21]);
var AgainstBug = double.Parse(values[22]);
var AgainstRock = double.Parse(values[23]);
var AgainstGhost = double.Parse(values[24]);
var AgainstDragon = double.Parse(values[25]);
var AgainstDark = double.Parse(values[26]);
var AgainstSteel = double.Parse(values[27]);
var AgainstFairy = double.Parse(values[28]);
var Height = double.Parse(values[29]);
var Weight = double.Parse(values[30]);
var BMI = double.Parse(values[31]);

// Créer une nouvelle connexion à la base de données SQLite
using (SQLiteConnection connection = new SQLiteConnection(connectionString))
{
    connection.Open();

    // Créer une nouvelle commande SQL pour insérer les données
    using (SQLiteCommand command = new SQLiteCommand(connection))
    {
        // Définir la commande SQL d'insertion avec des paramètres
        command.CommandText = @"
            INSERT INTO PokemonData (Number, Name, Type1, Type2, Ability_1, Ability_2, Ability_3, Data2)
            VALUES (@Number, @Name, @Type1, @Type2, @Ability_1, @Ability_2, @Ability_3, @Data2);

            INSERT INTO PokemonStats (Number, HP, Att, Def, Spa, Spd, Spe)
            VALUES (@Number, @HP, @Att, @Def, @Spa, @Spd, @Spe);

            INSERT INTO PokemonWeakn (Number, AgainstFire, AgainstWater, AgainstElectric, AgainstGrass, AgainstIce, AgainstFighting, AgainstPoison, AgainstGround, AgainstFlying, AgainstPsychic, AgainstBug, AgainstRock, AgainstGhost, AgainstDragon, AgainstDark, AgainstSteel, AgainstFairy, AgainstNormal)
            VALUES (@Number, @AgainstFire, @AgainstWater, @AgainstElectric, @AgainstGrass, @AgainstIce, @AgainstFighting, @AgainstPoison, @AgainstGround, @AgainstFlying, @AgainstPsychic, @AgainstBug, @AgainstRock, @AgainstGhost, @AgainstDragon, @AgainstDark, @AgainstSteel, @AgainstFairy, @AgainstNormal);

            INSERT INTO PokemonMisc (Number, Height, Weight, BMI)
            VALUES (@Number, @Height, @Weight, @BMI);";
        command.Parameters.AddWithValue("@Number", Number);
        command.Parameters.AddWithValue("@Name", Name);
        command.Parameters.AddWithValue("@Type1", Type1);
        command.Parameters.AddWithValue("@Type2", Type2);
        command.Parameters.AddWithValue("@Ability_1", Ability_1);
        command.Parameters.AddWithValue("@Ability_2", Ability_2);
        command.Parameters.AddWithValue("@Ability_3", Ability_3);
        command.Parameters.AddWithValue("@HP", HP);
        command.Parameters.AddWithValue("@Att", Att);
        command.Parameters.AddWithValue("@Def", Def);
        command.Parameters.AddWithValue("@Spa", Spa);
        command.Parameters.AddWithValue("@Spd", Spd);
        command.Parameters.AddWithValue("@Spe", Spe);
        command.Parameters.AddWithValue("@AgainstFire", AgainstFire);
        command.Parameters.AddWithValue("@AgainstWater", AgainstWater);
        command.Parameters.AddWithValue("@AgainstElectric", AgainstElectric);
        command.Parameters.AddWithValue("@AgainstGrass", AgainstGrass);
        command.Parameters.AddWithValue("@AgainstIce", AgainstIce);
        command.Parameters.AddWithValue("@AgainstFighting", AgainstFighting);
        command.Parameters.AddWithValue("@AgainstPoison", AgainstPoison);
        command.Parameters.AddWithValue("@AgainstGround", AgainstGround);
        command.Parameters.AddWithValue("@AgainstFlying", AgainstFlying);
        command.Parameters.AddWithValue("@AgainstPsychic", AgainstPsychic);
        command.Parameters.AddWithValue("@AgainstBug", AgainstBug);
        command.Parameters.AddWithValue("@AgainstRock", AgainstRock);
        command.Parameters.AddWithValue("@AgainstGhost", AgainstGhost);
        command.Parameters.AddWithValue("@AgainstDragon", AgainstDragon);
        command.Parameters.AddWithValue("@AgainstDark", AgainstDark);
        command.Parameters.AddWithValue("@AgainstSteel", AgainstSteel);
        command.Parameters.AddWithValue("@AgainstFairy", AgainstFairy);
        command.Parameters.AddWithValue("@AgainstNormal", AgainstNormal);
        command.Parameters.AddWithValue("@Height", Height);
        command.Parameters.AddWithValue("@Weight", Weight);
        command.Parameters.AddWithValue("@BMI", BMI);

                // Exécuter la commande SQL
                command.ExecuteNonQuery();
            }
        }

        Console.WriteLine($"Data has been successfully inserted into the database, Context: {context.MessageHeaders}, {context.MessageId}, {context}");

        return Task.CompletedTask;
    }
}

public class MyMessage : IMessage
{
    public string Data { get; set; } = string.Empty;
}

